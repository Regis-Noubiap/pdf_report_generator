#!/usr/bin/env python3

import json
import locale
import sys
import emails 
import os 
import reports 

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
  max_revenue = {"revenue": 0}
  max_sales = {"max_sale":0} 
  car_year = {} 
  for item in data:
    #Revenue generated by this model (price * total_sales)
    # Conversion from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    #  max_revenue = item
    #  handle max sales
    item_sales = item["total_sales"]
    if item_sales > max_sales['max_sale']: 
      item['max_sale'] = item_sales
      max_sales = item
    # handle most popular car_year
    
    if item['car']['car_year'] not in car_year: 
      car_year[item['car']['car_year']] = item["total_sales"]
    car_year[item['car']['car_year']] =+ item["total_sales"]
  pop = max(car_year.values())
  for k,v in car_year.items():
    if v == pop: 
      pop_year = k 

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),

    "The {} had the most sales: {}".format(format_car(max_sales['car']),
      max_sales['max_sale']),
    "The most popular year was {} with {} sales".format(pop_year,pop)
  ]

  return summary
def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]),item["price"], 
    item["total_sales"]])
  return table_data

def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  #Generating a PDF report
  table_data = cars_dict_to_table(data) 
  reports.generate("/tmp/cars.pdf", "Sales summary for last month",
  process_data(data)[0]
  +'/n'+process_data(data)[1]+'/n' +process_data(data)[2], table_data) 
  # Sending the PDF report as an email attachment
  
  sender = "automation@example.com" 
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month" 
  body = process_data(data)[0]\n +process_data(data)[1]\n+process_data(data)[2]
  message = emails.generate(sender, receiver,subject,body, "/tmp/cars.pdf")
  emails.send(message) 

if __name__ == "__main__":
  main(sys.argv)

